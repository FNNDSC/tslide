#!/usr/bin/env python3
#
# (c) 2020 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

import  sys, os
import  json
from    argparse                import RawTextHelpFormatter
from    argparse                import ArgumentParser
from    distutils.sysconfig     import get_python_lib

import  pudb
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'build'))
import  pfmisc
from    pfmisc._colors          import Colors

from    tsmake                  import tsmake

# try:
#     from        pfmisc          import  pfmisc
# except:
#     sys.path.insert(1, os.path.join(get_python_lib(True, True), 'site-packages'))
#     sys.path.insert(1, os.path.join(get_python_lib(True, True), 'site-packages/pfmisc'))
#     import      pfmisc


# try:
#     from        _colors         import Colors
# except:
#     from        pfmisc._colors  import Colors

str_name    = tsmake
str_version = "0.99"
str_desc    = Colors.CYAN + """
 _                           _
| |                         | |         
| |_  ___  _ __ ___    __ _ | | __  ___ 
| __|/ __|| '_ ` _ \  / _` || |/ / / _ \ 
| |_ \__ \| | | | | || (_| ||   < |  __/
 \__||___/|_| |_| |_| \__,_||_|\_\ \___|
                                        



                             tslide page make


                              -- version """ + \
             Colors.YELLOW + str_version + Colors.CYAN + """ --

    'tsmake' collects a set of text/json slide files into an `index.html`
    suitable for running the tslide text-slide presentation system.

    The `tslide` system is designed to provide a quick-n-dirty mechanism
    for building an html slide show around a series of essentially text-
    formatted and decorated individual files. The slide order is indentical 
    to the ls-order of the underlying individual slide files.

    Creating slides is as simple as saving a set of JSON text files of 
    format:
""" + Colors.NO_COLOUR + """

    {""" + Colors.YELLOW + """
        'slideTitle': """+ Colors.GREEN + """'Some title for this slide',
        """ + Colors.YELLOW + """'slideBody': """ + Colors.GREEN + """'
            <h3>On on this slide, we have...</h3>
            <pre>

    Some text for the slide body.

            </pre>
        '""" + Colors.NO_COLOUR + """
    }

""" + Colors.GREEN + """
    Note also that a single text file can be processed and split into
    consituent slide files, greatly simplifying the workflow of 
    creating html slide shows from existing text.

"""

def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    NAME

	    %s

        - build tslide text files into an `index.html`

    SYNOPSIS

            %s                                                    \\
                --inputDir <inputDir>                               \\
                --outputDir <outputDir>                             \\
                [--slideTextNumRows <numRows>]                      \\
                [--slideListGlob <slidesListGlob>]                  \\
                [--slidePrefixDOMID <slidePrefixDOMID>]             \\
                [--fortune <numSlides>]                             \\
                [--verbosity <level>]                               \\
                [--json]                                            \\
                [-x|--desc]                                         \\
                [-y|--synopsis]
            
    BRIEF EXAMPLE

            # Assume a dir './slideShow` exists and contains files of
            # pattern 'slide-01.hjson', 'slide-02.hjson', ...
            tsmake  --outputDir /tmp/slides                         \\
                    --inputDir slides-example                       \\
                    --slideListGlob "slide-*"                       \\
                    --slideTextNumRows=30                           \\
                    --verbosity 0          

    '''  % (scriptName, scriptName)

    description =  '''
    DESCRIPTION

        ``%s`` is a module/script that assembles a set of text
        json files into an `index.html` suitable for running/displaying
        a slide show.

        Resultant `index.html` and related css, js, and image files/dirs
        are all deposited in an <outputDir>. Running a simple web server
        rooted in that directory is typcially no more difficult that 

            cd <outputDir>
            python3 -m http.server
        
        In this manner, by having <outputDir> be outside of the source
        code repo directory, any changes to css/js etc in the resultant 
        <outputDir> do not contaminate the base repository.
                        
    ARGS

        --inputDir <inputDir>
        An input directory containing individual text (json) slide files
        to assemble into slide show.

        --outputDir <outputDir>
        An output directory that will contain the resultant web-based 
        files suitable for completely running the created slide show.

        [--slidesFile <slidesFile>]
        A input text file to split into several constituent individual
        slide files, stored in the <inputDir>.

        [--slidesFileBreak <slidesFileBreak>]
        The token on which to split a <slidesFile>.

        [--slideTextNumRows <numRows>]
        If nonzero, pad any text slide with extra "rows" (i.e. \\n) so that
        slides all have a consistent minimum number of rows.

        [--slideListGlob <slideListGlob>]
        Files in <inputDir> are processed, in ls-shell order, to construct
        a slide show. If specified, this <slideListGlob> is applied
        to filter the file ls in <inputDir>.

        [--slidePrefixDOMID <slidePrefixDOMID>]
        If specified, use <slidePrefixDOMID> as the DOM id in the generated
        `index.html` for each slide.

        [--fortune <numberOfSlides>]
        If specified build "fake" <numberOfSlides> in <inputDir> first and then
        process them.

        [--json]
        If specified, print JSON return payload from call to run method.

        [-x|--desc]                                     
        Provide an overview help page.

        [-y|--synopsis]
        Provide a synopsis help summary.

        [--version]
        Print internal version number and exit.

        [-v|--verbosity <level>]
        Set the verbosity level. "0" typically means no/minimal output. 
        Levels:

            0:  no output
            1:  output start and stop notes
            2:  output assembly and dircopy notes
            3:  output per-slide creation
            4:  output actual slide contents while assembling

    EXAMPLES

        # Assume a dir './slideShow` exists and contains files of
        # pattern 'slide-01.hjson', 'slide-02.hjson', ...

        %s                                                    \\
            --outputDir /tmp/slides                             \\
            --inputDir slides-example                           \\
            --slideListGlob "slide-*"                           \\
            --slideTextNumRows=30                               \\
            --verbosity 0          

        # Create a series of "fake" slides first, and then 
        # build a slow show.

        %s                                                    \\
            --inputDir slideShow                                \\
            --outputDir /tmp/SlideShow
            --fortune 10

    ''' % (scriptName, scriptName, scriptName)

    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description



parser  = ArgumentParser(description = str_desc, formatter_class = RawTextHelpFormatter)

parser.add_argument(
    '--slidesFile',
    help    = 'A single text file to be split into various slide files.',
    dest    = 'slidesFile',
    default = ""
)

parser.add_argument(
    '--slidesFileBreak',
    help    = 'The token on which to break an input slidesFile',
    dest    = 'slidesFileBreak',
    default = "<slidebreak>"
)

parser.add_argument(
    '--inputDir',
    help    = 'directory from which to read slide text files.',
    dest    = 'inputDir',
    default = ""
)

parser.add_argument(
    '--outputDir',
    help    = 'directory in which to build web slide show.',
    dest    = 'outputDir',
    default = ""
)

parser.add_argument(
    '--slideTextNumRows',
    help    = 'minimum number of rows in a text slide.',
    dest    = 'slideTextNumRows',
    default = "0"
)

parser.add_argument(
    '--slideListGlob',
    help    = 'glob pattern to apply to file list in <inputDir>.',
    dest    = 'slideListGlob',
    default = "*"
)

parser.add_argument(
    '--slidePrefixDOMID',
    help    = 'ID prefix string for each slide in the DOM.',
    dest    = 'slidePrefixDOMID',
    default = "slide-"
)

parser.add_argument(
    '--fortune',
    help    = 'if specified, build a "fortune" slideshow of passed numberOfSlides',
    dest    = 'fortune',
    default = "0"
)

parser.add_argument(
    '--version',
    help    = 'if specified, print version number',
    dest    = 'b_version',
    action  = 'store_true',
    default = False
)

parser.add_argument(
    '--json',
    help    = 'if specified, print JSON return from run method',
    dest    = 'b_json',
    action  = 'store_true',
    default = False
)

parser.add_argument(
    "-v", "--verbosity",
    help    = "verbosity level for app",
    dest    = 'verbosity',
    default = "1"
)

parser.add_argument(
    "-x", "--desc",
    help    = "long synopsis",
    dest    = 'desc',
    action  = 'store_true',
    default = False
)

parser.add_argument(
    "-y", "--synopsis",
    help    = "short synopsis",
    dest    = 'synopsis',
    action  = 'store_true',
    default = False
) 

args                = parser.parse_args()

if args.desc or args.synopsis:
    print(str_desc)
    if args.desc:
        str_help     = synopsis(False)
    if args.synopsis:
        str_help     = synopsis(True)
    print(str_help)
    sys.exit(1)

d_args              = vars(args).copy()
d_args['desc']      = str_desc
d_args['name']      = str_name
d_args['version']   = str_version

if args.b_version:
    print("Version: %s" % str_version)
    sys.exit(1)

TSmake  = tsmake(**d_args)
d_run   = TSmake.run(timerStart = True) 
if args.b_json:
    print(
        json.dumps(
            d_run,
            indent = 4
        )
    )